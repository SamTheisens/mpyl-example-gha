name: build
on:
  push:
    branches-ignore: [ 'main' ]

permissions: write-all

jobs:
  build-pipeline:
    runs-on: ubuntu-latest
    env:
      MPYL_VERSION: "1.4.0"
      DOCKER_REGISTRY_USR: ${{ github.actor }}
      DOCKER_REGISTRY_PSW: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'

#      - name: Install MPyL
#        continue-on-error: true
#        run: pip install mpyl==${{ env.MPYL_VERSION }}

      - name: Install MPyL
        run: pip install -i https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple mpyl====333.3613


      - name: Initialize repo
        run: mpyl repo init -b ${{ github.ref }} -u https://${{ env.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git -p

      - name: MPyL health
        run: mpyl health --ci

      - name: Repo status
        run: mpyl repo status

      - name: Build status
        run: mpyl build status

      - name: Find PR number
        uses: jwalton/gh-find-current-pr@v1
        id: findPr
        if: github.ref_name != 'main'
        with:
          state: open

      - name: Pull cache
        env:
          ARGOCD_GITHUB_TOKEN: ${{ secrets.ARGOCD_GITHUB_TOKEN }}
        run: mpyl build artifacts pull --pr ${{ steps.findPr.outputs.pr }} --path cache

      - name: Build status after pull
        run: mpyl build status

      - name: Build run
        env:
          PR_NUMBER: ${{ steps.findPr.outputs.pr }}
          ARGOCD_GITHUB_TOKEN: ${{ secrets.ARGOCD_GITHUB_TOKEN }}
        run: mpyl build run --ci

      - name: Push manifests
        env:
          PR_NUMBER: ${{ steps.findPr.outputs.pr }}
          ARGOCD_GITHUB_TOKEN: ${{ secrets.ARGOCD_GITHUB_TOKEN }}
        run: mpyl build artifacts push --pr ${{ steps.findPr.outputs.pr }} --path manifests --artifact-type manifests

      - name: Push cache
        env:
          PR_NUMBER: ${{ steps.findPr.outputs.pr }}
          ARGOCD_GITHUB_TOKEN: ${{ secrets.ARGOCD_GITHUB_TOKEN }}
        run: mpyl build artifacts push --pr ${{ steps.findPr.outputs.pr }} --path cache --artifact-type cache
